var aiTechniquesMarkdown = "# CHAI Hackathon: Core AI Techniques Explained\n\nHi Team,\n\nAs we prepare for the hackathon, it's really important for all of us, coders and non-coders alike, to understand some basic Artificial Intelligence (AI) concepts. These are the building blocks of the solutions we'll be creating. Don't worry about the technical jargon; think of these as \"smart tools\" that help computers do amazing things.\n\nHere are the main AI techniques we've seen pop up across our research:\n\n#### 1. Natural Language Processing (NLP)\n\n*   **What it is:** Imagine teaching a computer to understand human language \u2013 the way we speak, write, and even text. That's NLP. It helps computers read, interpret, and even generate text and speech.\n*   **How it helps in Africa:**\n    *   **Breaking Language Barriers:** Think about all the different languages spoken across Africa. NLP can translate educational materials into local dialects, or convert written health reports into a common language for analysis.\n    *   **Understanding Conversations:** It can power chatbots that answer customer questions in their local language or sift through doctor's notes to find important medical information.\n*   **Examples from Case Studies:**\n    *   **Education:** The AI learning platform could translate lesson instructions into Somali for Fatuma, and its text-to-speech feature read story problems aloud in her native tongue.\n    *   **Healthcare:** An NLP module scanned WhatsApp messages from health worker groups for disease keywords (in English and Swahili) to aid in outbreak detection.\n    *   **Insurance:** NLP can read claim descriptions to extract key details automatically.\n\n#### 2. Computer Vision\n\n*   **What it is:** This is about teaching computers to \"see\" and interpret images and videos, just like humans do. It helps them recognize objects, faces, patterns, and even assess damage.\n*   **How it helps in Africa:**\n    *   **Spotting Fraud:** In areas like insurance, it can quickly identify if someone is submitting a fake picture of an accident or trying to use the same photo for multiple claims.\n    *   **Damage Assessment:** For insurance claims, it can estimate the cost of repairs from photos, speeding up payouts.\n    *   **Health Diagnostics (Potential):** In the future, it could help in basic diagnostics from images (though this wasn't a primary focus in our case studies yet).\n*   **Examples from Case Studies:**\n    *   **Insurance:** The AI system used a computer vision tool to analyze images of vehicle damage, detecting if the same damage picture was reused in different claims. For agricultural claims, it could verify the authenticity and extent of loss from a farmer's photo.\n\n#### 3. Predictive Analytics / Anomaly Detection\n\n*   **What it is:** These are like having a super-smart detective that constantly looks for unusual patterns or predicts what might happen next based on past information.\n    *   **Predictive Analytics:** Uses historical data to forecast future events (e.g., predicting where an outbreak might occur next).\n    *   **Anomaly Detection:** Spots things that are out of the ordinary (e.g., a strange transaction in your bank account).\n*   **How it helps in Africa:**\n    *   **Early Warnings:** Crucial for health, detecting early signs of disease outbreaks before they spread widely. Also, for insurance, predicting risks like droughts.\n    *   **Fighting Fraud:** Instantly flagging suspicious financial transactions that don't match a person's usual behavior.\n    *   **Resource Management:** Predicting where medical supplies or teachers might be needed, helping to allocate resources more effectively.\n*   **Examples from Case Studies:**\n    *   **Healthcare:** The AI model monitored health reports for unusual patterns (e.g., a spike in diarrhoea cases) to detect potential cholera outbreaks early.\n    *   **Finance:** Real-time anomaly detection flagged unusual logins or transactions (like a large transfer at 2 AM from a new device) that indicated SIM swap fraud.\n    *   **Insurance:** Dynamic risk prediction analyzed weather forecasts and farm data to offer personalized drought insurance.\n\n#### 4. Voice Biometrics\n\n*   **What it is:** This technology recognizes and verifies a person's identity based on their unique voice patterns. It's like a voice fingerprint.\n*   **How it helps in Africa:**\n    *   **Secure Transactions:** Provides an extra layer of security for financial transactions, especially when traditional PINs or passwords can be compromised.\n    *   **Accessibility:** For users with basic phones or low literacy, using their voice can be a much simpler and more secure way to verify their identity than typing.\n*   **Examples from Case Studies:**\n    *   **Finance:** When a suspicious transaction was flagged, the AI system requested a voice passphrase to confirm the user's identity, preventing SIM swap fraudsters from emptying accounts.\n\n---\n\nThese are powerful tools, and understanding them will help us envision creative and effective solutions for our hackathon challenges. Let me know if any of these need further clarification!\n";
var techStacksMarkdown = "# CHAI Hackathon: Exploring Robust Tech Stacks for African Contexts\n\nHi Team,\n\nFor our hackathon solutions to be truly impactful in Africa, we need to think carefully about the technologies we use. Many areas have limited internet access, low bandwidth, and people often use basic \"feature phones\" instead of smartphones. Our tech choices need to work around these realities, not just in ideal conditions.\n\nHere's a look at some technology ideas and approaches that can help us build resilient and accessible solutions:\n\n#### 1. Designing for Offline-First\n\n*   **The Idea:** Your application should work even when there's no internet. Data can be saved locally on the device and then sent to a central server whenever a connection becomes available (even if it's just once a week).\n*   **Why it's important:** Ensures continuous operation in remote areas.\n*   **Key Technologies:**\n    *   **Databases for Devices:** `SQLite` (for Android/iOS), `PouchDB` (for web apps that need offline sync), `Realm` (for mobile apps) are great for storing data directly on the phone or tablet.\n    *   **Offline Content:** Pre-loading entire curricula, health guides, or financial education modules onto devices or even memory cards.\n*   **Example from Case Studies:** The education platform stored lessons locally on solar-powered tablets, and the healthcare app cached patient data offline, syncing it whenever a network was available.\n\n#### 2. Reaching Users with Basic Phones (Feature Phones)\n\n*   **The Idea:** Don't just design for smartphones. Many people still rely on basic phones for communication and services.\n*   **Why it's important:** Maximizes reach and inclusion, ensuring solutions are accessible to the widest possible audience.\n*   **Key Technologies:**\n    *   **USSD (Unstructured Supplementary Service Data):** This allows for interactive menu-driven services on any phone, without needing internet. Think of checking your mobile money balance \u2013 that's often USSD.\n    *   **SMS (Short Message Service):** Simple text messages can deliver quizzes, alerts, updates, and even allow for basic data input.\n    *   **Voice IVR (Interactive Voice Response):** Automated voice calls that can guide users through options or even request voice verification (as seen in the finance case study).\n    *   **Open-Source SMS Gateways:** Solutions like `Kannel` or integrating with local SMS APIs for sending/receiving messages programmatically.\n*   **Example from Case Studies:** The education platform sent interactive SMS quizzes to basic feature phones. The finance solution used SMS and voice calls for identity verification as a fallback for non-smartphone users.\n\n#### 3. Low-Bandwidth and Efficient Data Transfer\n\n*   **The Idea:** Even when there is internet, it might be slow or expensive. Our solutions should be \"light\" on data usage.\n*   **Why it's important:** Reduces costs for users and ensures applications perform well even on 2G networks.\n*   **Key Technologies:**\n    *   **Optimized Data Formats:** Using efficient data formats like `JSON` or even highly compressed custom formats.\n    *   **Asynchronous Syncing:** Sending data in the background or in small batches, rather than constantly.\n    *   **Edge Computing:** Processing data closer to where it's collected (on the device or a local server) to reduce the amount of data sent to the cloud.\n*   **Example from Case Studies:** The education platform used a solar-powered local server to store data, reducing reliance on constant internet.\n\n#### 4. Cost-Effective and Open-Source Solutions\n\n*   **The Idea:** Leverage free and open-source software wherever possible to reduce development and deployment costs.\n*   **Why it's important:** Promotes sustainability and local ownership, as the solutions can be freely adapted and maintained without expensive licenses.\n*   **Key Technologies:**\n    *   **Programming Languages:** `Python` (for AI/backend), `JavaScript` (for web/mobile), `Java/Kotlin` (for Android), `Swift` (for iOS).\n    *   **Mobile Development Frameworks:** `React Native` or `Flutter` for building apps that work on both Android and iOS from a single codebase.\n    *   **Cloud Platforms (Used Sparingly):** Services like `Google Cloud Platform` or `AWS` can be used for central AI models and data storage, but only when necessary and designed for cost efficiency. Local servers can be used for most operations.\n    *   **Open-Source AI Libraries:** `TensorFlow Lite` or `PyTorch Mobile` for running AI models directly on devices, reducing cloud reliance.\n*   **Example from Case Studies:** The healthcare solution was built by a \"scrappy team of hackers\" who stood up an emergency AI network, implying a focus on rapid development and resourcefulness.\n\n#### 5. Local Server Infrastructure\n\n*   **The Idea:** Instead of relying solely on distant cloud servers, establish local \"mini-servers\" within communities or schools.\n*   **Why it's important:** Provides data sovereignty, faster local access, and reduces dependency on external internet infrastructure.\n*   **Key Technologies:**\n    *   **Raspberry Pi / Low-Cost Microcomputers:** Small, affordable computers that can host local applications and databases.\n    *   **Solar Power Integration:** Essential for powering these local servers in off-grid locations.\n*   **Example from Case Studies:** The education initiative provided a solar-powered local server to Umoja Primary, which stored the AI learning app and content.\n\n---\n\nThinking about these technical considerations will help us shape our solutions to be both innovative and practical for the African context. We want to build things that can actually be used and make a difference on the ground.\n";
var ethicalAiChecklistMarkdown = "# CHAI Hackathon: Ethical AI Checklist for Responsible Development\n\nHi Team,\n\nAs we build AI solutions that aim to improve lives in Africa, it's crucial that we develop them responsibly. The whitepapers we've studied all emphasized \"Ethical, Regulatory & Inclusive Design Considerations.\" This checklist distills those important points into practical questions we should ask ourselves throughout the hackathon.\n\nThink of this as our guide to ensure our solutions are not just technically brilliant, but also fair, safe, and truly beneficial for the communities we serve.\n\n#### **The Ethical AI Checklist:**\n\n**1. Data Privacy & Security:**\n*   **Question:** Does our solution handle sensitive user data (personal details, health records, financial transactions, children's information) with the utmost care?\n*   **Checkpoints:**\n    *   Is all data encrypted, both when stored and when being sent (in transit)?\n    *   Do we only collect data that is absolutely necessary for our solution to work?\n    *   Is there clear consent from users (or their guardians) for data collection and usage?\n    *   Are personal identifiers anonymized whenever possible for analysis?\n    *   Are there robust access controls, ensuring only authorized individuals can view sensitive data?\n    *   Does our solution comply with relevant data protection laws (e.g., Kenya's Data Protection Act, GDPR if applicable)?\n\n**2. Fairness & Bias Mitigation:**\n*   **Question:** Are we actively working to prevent our AI from showing unfair biases towards any group (e.g., based on location, gender, socioeconomic status, language)?\n*   **Checkpoints:**\n    *   Is our training data diverse and representative of the target user population?\n    *   Have we considered if certain groups might be unintentionally disadvantaged by our AI's decisions?\n    *   Are we regularly auditing our AI models to detect and correct any biases that might emerge?    *   Could our solution inadvertently offer worse service or pricing to certain demographics?\n\n**3. Transparency & Explainability:**\n*   **Question:** Can we clearly explain how our AI makes decisions, especially when those decisions directly impact users' lives?\n*   **Checkpoints:**\n    *   Is the reasoning behind the AI's recommendations or actions understandable to users and stakeholders (e.g., \"Your premium went down because of X,\" or \"This transaction was flagged because of Y pattern\")?\n    *   Is there a \"human in the loop\" for critical or borderline decisions, allowing human oversight and intervention?\n    *   Do we have mechanisms to communicate AI decisions and their rationale to users (e.g., through notifications, dashboards)?\n\n**4. Inclusion & Accessibility:**\n*   **Question:** Is our solution accessible and usable by everyone, regardless of their device, internet access, literacy level, or disability?\n*   **Checkpoints:**\n    *   Does our solution function effectively on basic feature phones (e.g., via SMS, USSD, voice)?\n    *   Does it work in low-bandwidth or offline environments?\n    *   Does it support local languages and culturally relevant examples?\n    *   Have we considered accessibility for users with disabilities (e.g., audio output for visually impaired, captions for hearing impaired)?\n    *   Is the user interface simple, intuitive, and easy to understand for users with varying levels of digital literacy?\n\n**5. User Consent & Trust:**\n*   **Question:** Have we designed our solution to build and maintain user trust, particularly when using advanced features like biometrics?\n*   **Checkpoints:**\n    *   Are users clearly informed about how their data (including biometric data) will be used and how it benefits them?\n    *   Do users have an option to opt-out of certain features or use alternative verification methods (e.g., PIN fallback for biometrics)?\n    *   Do we provide clear instructions and support for users who might be intimidated by new technology?\n    *   Is our communication with users transparent, especially when transactions are blocked or accounts are put on hold?\n\n**6. Sustainability & Local Ownership:**\n*   **Question:** Is our solution designed to be sustainable in the long term, with local communities and institutions capable of maintaining and evolving it?\n*   **Checkpoints:**\n    *   Does our solution minimize recurring costs and leverage open-source components where possible?\n    *   Are we considering how local capacity can be built to manage and adapt the technology?\n    *   Is the solution designed to integrate with existing local infrastructures and systems?\n\n---\n\nThis checklist is a living document \u2013 we should revisit and refine it as our project develops. By consistently asking ourselves these questions, we can ensure our hackathon project is not only innovative but also responsible and truly beneficial for the people of Africa.\n";
function markdownToHtml(markdown) {
    var html = markdown
        .replace(/^#### (.*$)/gim, '<h4>$1</h4>') // H4
        .replace(/^### (.*$)/gim, '<h3>$1</h3>') // H3
        .replace(/^## (.*$)/gim, '<h2>$1</h2>') // H2
        .replace(/^# (.*$)/gim, '<h1>$1</h1>') // H1
        .replace(/^\* \*\*(.*?)\*\*: (.*)/gim, '<li><strong>$1:</strong> $2</li>') // List item with bold key
        .replace(/^\* (.*$)/gim, '<li>$1</li>') // Unordered list
        .replace(/\*\*(.*?)\*\*/gim, '<strong>$1</strong>') // Bold text
        .replace(/`(.*?)`/gim, '<code>$1</code>'); // Inline code
    // Wrap remaining paragraphs if they are not part of a list or heading
    html = html.split('\n').map(function (line) {
        if (line.trim() === '' || line.match(/<h[1-4]>|<\/h[1-4]>|<li|<ul|<code/)) {
            return line;
        }
        return "<p>".concat(line, "</p>");
    }).join('\n');
    // Replace <p> with actual lists where appropriate
    html = html.replace(/<p><li>/g, '<ul><li>').replace(/<\/li><\/p>/g, '</li></ul>');
    html = html.replace(/(<\/li>\n<p>)(?!<h|<ul|<li)/g, '</li>\n<li>');
    // Convert horizontal rules
    html = html.replace(/^---$/gim, '<hr>');
    // Basic paragraph wrapping (handle lines that aren't already wrapped)
    // This is a simple approach and might need refinement for complex markdown
    html = html.split('\n').map(function (line) {
        if (line.trim() === '')
            return ''; // Empty lines
        if (line.startsWith('<') && line.endsWith('>'))
            return line; // Already an HTML tag
        if (line.startsWith('<ul>') || line.startsWith('<ol>') || line.startsWith('<li>') || line.startsWith('<h'))
            return line; // List or heading
        return "<p>".concat(line, "</p>");
    }).join('');
    // Clean up empty paragraph tags that might occur after replacements
    html = html.replace(/<p><\/p>/g, '');
    html = html.replace(/<p>\s*<\/p>/g, ''); // Also remove paragraphs with only whitespace
    return html;
}
var activities = [
    { title: "Core AI Techniques Explained", markdownContent: aiTechniquesMarkdown },
    { title: "Exploring Robust Tech Stacks", markdownContent: techStacksMarkdown },
    { title: "Ethical AI Checklist", markdownContent: ethicalAiChecklistMarkdown },
];
function createActivityCard(activity) {
    var htmlContent = markdownToHtml(activity.markdownContent);
    return "\n        <div class=\"activity-card\">\n            <h2>".concat(activity.title, "</h2>\n            <div class=\"card-content\">\n                ").concat(htmlContent, "\n            </div>\n        </div>\n    ");
}
document.addEventListener('DOMContentLoaded', function () {
    var activitiesContainer = document.getElementById('activities-container');
    if (activitiesContainer) {
        activitiesContainer.innerHTML = activities.map(createActivityCard).join('');
    }
});
